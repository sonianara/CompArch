mips_asm Version 1.0h
Source file: diagnostics.s
Object file: diagnostics.mb
                         #	diagnostics.s - Diagnostics for MIPS CPU simulation
                         
                         #	CPE 315 MIPS Simulation Test Suite (Version: 20170220)
                         #	This can be used in your development of Labs 5-7 for testing
                         #	of the various MIPS instruction types.
                         
                         #	First, define some constant locations for lw and lb instructions
                         
                         #	To generate the loadable binary, use mips_asm diagnostics.s
                         
                         # 	Use your "single-step" feature to check the registers after each instruction
                         
[00000000] 55555555 test55:	.word	0x55555555
[00000004] AAAAAAAA testAA:	.word	0xAAAAAAAA
                         
                         main:			# Main entry point for program
                         
[00000008] 00000000 	nop				# assume your nop works!
                         
                         #	Test R type instructions, starting with add
                         
[0000000C] 34090001 	ori	$t1, $zero, 0x0001	# let's add 1 and 2
[00000010] 340A0002 	ori	$t2, $zero, 0x0002	# constant 2
[00000014] 012A4020 	add	$t0, $t1, $t2		# results to $t0
[00000018] 00000000 	nop				# CHK: $t0 should be 0x00000003
                         
                         #	Now try sign-extension on add
                         
[0000001C] 3409000A 	ori	$t1, $zero, 0x000A	# let's add 10 and -1
[00000020] 200AFFFF 	addi	$t2, $zero, -1		# constant -1, sign extended
[00000024] 012A4020 	add	$t0, $t1, $t2		# $t2 should be 0xFFFFFFFF
[00000028] 00000000 	nop				# CHK: $t0 should be 0x00000009
                         
                         #	Now try subtract
                         
[0000002C] 34090100 	ori	$t1, $zero, 256		# let's compute 256 - 2
[00000030] 340A0002 	ori	$t2, $zero, 2		# constant 2
[00000034] 012A4022 	sub	$t0, $t1, $t2		# results to $t0
[00000038] 00000000 	nop				# CHK: $t0 should be 0x000000FE
                         
                         #	Now put a result in another register, $s0, NOT sign extended
                         
[0000003C] 3410FFFF 	ori	$s0, $zero, 0xFFFF	# $s0 gets sign-extended 0xFFFF
[00000040] 00000000 	nop				# CHK: $s0 should be 0x0000FFFF
                         
                         #	Do left shift by 1
                         
[00000044] 34090004 	ori	$t1, $zero, 0x0004	# Load test value
[00000048] 00094040 	sll	$t0, $t1, 1		# shift $t1 left 1, result to $t0
[0000004C] 00000000 	nop				# CHK: $t0 should be 0x00000008
                         
                         #	Do shift 1 bit right logical
                         
[00000050] 00094042 	srl	$t0, $t1, 1		# $t0 gets $t1 shifted right 1
[00000054] 00000000 	nop				# CHK: $t0 should be 0x00000002
                         
                         #	Now test signed shift right, logical
                         
[00000058] 2009FFF8 	addi	$t1, $zero, -8		# $t1 should be 0xFFFFFFF8		
[0000005C] 00094082 	srl	$t0, $t1, 2		# $t0 gets $t1 right shifted 2
[00000060] 00000000 	nop				# CHK: $t0 should be 0x3FFFFFFE
                         
                         #	Now test signed shift right, arithmetic
                         
[00000064] 2009FFF8 	addi	$t1, $zero, -8		# $t1 should be 0xFFFFFFF8		
[00000068] 00094083 	sra	$t0, $t1, 2		# $t0 gets $t1 right shifted 2
[0000006C] 00000000 	nop				# CHK: $t0 should be 0xFFFFFFFE
                         
                         #	Now try variable shifts, starting with srlv
                         
[00000070] 34090100 	ori	$t1, $zero, 0x0100	# $t1 gets 0x00000100
[00000074] 340A0005 	ori	$t2, $zero, 5		# number of bits to shift
[00000078] 01494006 	srlv	$t0, $t1, $t2		# $t0 gets $t1 >> 5
[0000007C] 00000000 	nop				# CHK: $t0 should be 0x00000008
                         
                         #	Now try variable shift arithmetic
                         
[00000080] 2009FFE0 	addi	$t1, $zero, -32		# $t1 gets 0xFFFFFFE0
[00000084] 340A0003 	ori	$t2, $zero, 3		# number of bits to shift
[00000088] 01494007 	srav	$t0, $t1, $t2		# $t0 gets $t1 >> 3
[0000008C] 00000000 	nop				# CHK: $t0 should be 0xFFFFFFFC
                         
                         #	Now try slt and sltu
                         
[00000090] 34090020 	ori	$t1, $zero, 0x20	# $t1 is 0x20
[00000094] 340A0030 	ori	$t2, $zero, 0x30	# $t2 is 0x30
[00000098] 012A402A 	slt	$t0, $t1, $t2		# $t0 1 if $t1 < $t2
[0000009C] 00000000 	nop				# CHK: $t0 should be 0x00000001
                         
[000000A0] 34090030 	ori	$t1, $zero, 0x30	# $t1 is 0x20
[000000A4] 340A0020 	ori	$t2, $zero, 0x20	# $t2 is 0x30
[000000A8] 012A402A 	slt	$t0, $t1, $t2		# $t0 1 if $t1 < $t2
[000000AC] 00000000 	nop				# CHK: $t0 should be 0x00000000
                         
[000000B0] 29280040 	slti	$t0, $t1, 0x0040	# compare to literal value
[000000B4] 00000000 	nop				# CHK: $t0 should be 1
                         
                         #	Test branch instructions
                         
[000000B8] 10000002 	beq	$zero, $zero, next	# should always branch
[000000BC] 00000000 	nop
[000000C0] 00000000 	nop
[000000C4] 00000000 next:	nop				# CHK: this is where we land !
                         
                         #	Here's a better test: compare $t1 and $t2
                         
[000000C8] 34090001 	ori	$t1, $zero, 1
[000000CC] 340A0002 	ori	$t2, $zero, 2		# ok, they're not equal
[000000D0] 112A0002 	beq	$t1, $t2, next2		# should NOT take the branch
[000000D4] 00000000 	nop
[000000D8] 00000000 	nop
[000000DC] 00000000 next2:	nop				# CHK: should get here by stepping down
                         
                         #	Here's another test: basic loop, where the branch has a negative offset
                         
[000000E0] 34090001 	ori	$t1, $zero, 1
[000000E4] 340A0004 	ori	$t2, $zero, 4		# ok, they're not equal
[000000E8] 00000000 next2a:	nop				# misc.
[000000EC] 00000000 	nop				# doing stuff ....
[000000F0] 214AFFFF 	addi	$t2, $t2, -1		# decrement $t2
[000000F4] 152AFFFC 	bne	$t1, $t2, next2a	# should take the branch 3x
[000000F8] 00000000 	nop				# CHK: $t2 should be 0x00000001
                         
[000000FC] 00000000 next3:	nop				# should get here by stepping down
                         
                         #	Let's load words
                         
[00000100] 8C080000 	lw	$t0, test55		# loads from test55($zero)
[00000104] 00000000 	nop				# CHK: should be 0x55555555
                         
[00000108] 8C080004 	lw	$t0, testAA
[0000010C] 00000000 	nop				# CHK: $t0 is: 0xAAAAAAAA
                         
[00000110] 80080004 	lb	$t0, testAA
[00000114] 00000000 	nop				# CHK: $t0 is: 0xFFFFFFAA
                         
[00000118] 90080004 	lbu	$t0, testAA
[0000011C] 00000000 	nop				# CHK: $t0 is 0x000000AA
                         
                         #	ok, now the jump, jal, and jr instructions
                         
[00000120] 0800004C 	j	next4			# should go down to next4
[00000124] 00000000 	nop
[00000128] 00000000 	nop				# skip over these
[0000012C] 00000000 	nop
[00000130] 00000000 next4:	nop				# CHK: ok, we landed here.
                         
[00000134] 01084026 	xor	$t0, $t0, $t0		# clear $t0
[00000138] 0C000052 	jal	next5			# go to next5, then return to the following:
[0000013C] 00000000 	nop				# $t0 should be a 0x00003333
                         
[00000140] 3402000A 	ori	$v0, $zero, 10		# code for syscall HALT
[00000144] 0000000C 	syscall				# We're DONE !!!
                         
                         #	Function: next5
                         
[00000148] 34083333 next5:	ori	$t0, $zero, 0x3333	# CHK: final test: result to $t0
[0000014C] 03E00008 	jr	$ra			# Return from function
                         
           ???????? 	.end	main			# entry point
Code size: 00000150 (336) bytes.
Entry point: 00000008
Error count: 0
Symbol Table: 9 entries defined.
test55 = 00000000 (0), type=03 (Label)
testAA = 00000004 (4), type=03 (Label)
main = 00000008 (8), type=03 (Label)
next = 000000C4 (196), type=03 (Label)
next2 = 000000DC (220), type=03 (Label)
next2a = 000000E8 (232), type=03 (Label)
next3 = 000000FC (252), type=03 (Label)
next4 = 00000130 (304), type=03 (Label)
next5 = 00000148 (328), type=03 (Label)

